apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: webapp-prod
  namespace: argocd
  labels:
    app: webapp
    environment: prod
    team: business
spec:
  project: prod-project
  source:
    repoURL: http://s3.devkuban.com/helm-charts
    chart: webapp
    targetRevision: 1.0.9
    helm:
      values: |
        # Production environment configuration
        global:
          environment: prod
          cluster: prod-cluster
        
        # Production deployment settings
        replicaCount: 5
        
        # Image configuration
        image:
          repository: nginx
          pullPolicy: IfNotPresent
          tag: "1.21-alpine"
        
        # Service configuration
        service:
          type: ClusterIP
          port: 80
          targetPort: 80
          annotations:
            service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
        
        # Production ingress with SSL and security
        ingress:
          enabled: true
          className: "nginx"
          annotations:
            nginx.ingress.kubernetes.io/ssl-redirect: "true"
            nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
            cert-manager.io/cluster-issuer: "letsencrypt-prod"
            nginx.ingress.kubernetes.io/rate-limit: "100"
            nginx.ingress.kubernetes.io/rate-limit-window: "1m"
          hosts:
            - host: webapp.devkuban.com
              paths:
                - path: /
                  pathType: Prefix
          tls:
            - secretName: webapp-prod-tls
              hosts:
                - webapp.devkuban.com
        
        # Production resource limits
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 500m
            memory: 512Mi
        
        # Comprehensive health checks
        livenessProbe:
          enabled: true
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          enabled: true
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        
        startupProbe:
          enabled: true
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 30
        
        # Production autoscaling
        autoscaling:
          enabled: true
          minReplicas: 3
          maxReplicas: 20
          targetCPUUtilizationPercentage: 70
          targetMemoryUtilizationPercentage: 80
        
        # Network security
        networkPolicy:
          enabled: true
          ingress:
            - from:
                - namespaceSelector:
                    matchLabels:
                      name: ingress-nginx
              ports:
                - protocol: TCP
                  port: 80
        
        # Persistent storage
        persistence:
          enabled: true
          accessMode: ReadWriteOnce
          size: 10Gi
          storageClass: "gp3"
        
        # Service account with IAM role
        serviceAccount:
          create: true
          annotations:
            eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT:role/webapp-prod-role
        
        # Pod disruption budget for high availability
        podDisruptionBudget:
          enabled: true
          minAvailable: 2
        
        # Security context (hardened for production)
        podSecurityContext:
          runAsNonRoot: true
          runAsUser: 1001
          fsGroup: 1001
        
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
        
        # Anti-affinity for production
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - webapp
                topologyKey: kubernetes.io/hostname
        
        # Node selection for production nodes
        nodeSelector:
          node-type: production
        
        # Tolerations for dedicated production nodes
        tolerations:
          - key: "production-only"
            operator: "Equal"
            value: "true"
            effect: "NoSchedule"
        
        # Additional volumes for production
        extraVolumes:
          - name: tmp-volume
            emptyDir: {}
          - name: cache-volume
            emptyDir: {}
        
        extraVolumeMounts:
          - name: tmp-volume
            mountPath: /tmp
          - name: cache-volume
            mountPath: /var/cache/nginx

  destination:
    server: https://kubernetes.default.svc
    namespace: business-apps-prod
    
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - RespectIgnoreDifferences=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
        
  ignoreDifferences:
    - group: ""
      kind: "Service"
      jsonPointers:
        - /spec/clusterIP
    - group: "apps"
      kind: "Deployment"
      jsonPointers:
        - /spec/replicas
      managedFieldsManagers:
        - kube-controller-manager
